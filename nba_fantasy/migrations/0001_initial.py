# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-21 15:19
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('nba_stats', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FantasyLeague',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('num_teams', models.IntegerField()),
                ('private_flag', models.BooleanField(default=False)),
                ('season_start_date', models.DateField(null=True)),
                ('lineup_changes', models.CharField(choices=[('DIG', 'Daily, at start of individual game.'), ('DAG', 'Daily, at beginning of all games.'), ('WK', 'Weekly, before the first game of the week.')], default='DIG', max_length=3)),
                ('use_waivers_flag', models.BooleanField(default=False)),
                ('waiver_period', models.IntegerField(default=0)),
                ('season_acquisition_limit', models.IntegerField(default=0)),
                ('trade_limit', models.IntegerField(default=0)),
                ('trade_deadline', models.DateField(null=True)),
                ('trade_review_period', models.DurationField(null=True)),
                ('veto_votes_reqd', models.IntegerField(default=0)),
                ('keepers_flag', models.BooleanField(default=False)),
                ('max_keepers', models.IntegerField(default=0)),
                ('schedule_type', models.CharField(choices=[('ROTO', 'Rotisserie'), ('H2H', 'Head to head')], default='H2H', max_length=4)),
                ('start_week', models.IntegerField(default=0)),
                ('weeks_per_matchup', models.IntegerField(default=1)),
                ('reg_season_matchups', models.IntegerField(default=19)),
                ('num_playoff_teams', models.IntegerField(default=4)),
                ('draft_type', models.CharField(choices=[('SC', 'Salary Cap'), ('SK', 'Snake Draft')], default='SK', max_length=2)),
                ('draft_date', models.DateTimeField(null=True)),
                ('salary_cap', models.IntegerField(default=0)),
                ('seconds_per_pick', models.IntegerField(default=0)),
                ('scoring_type', models.CharField(choices=[('CAT', 'Categories'), ('PTS', 'Points')], default='PTS', max_length=3)),
                ('scoring_fields_vals', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('point_guard', models.IntegerField(default=0)),
                ('shooting_guard', models.IntegerField(default=0)),
                ('small_forward', models.IntegerField(default=0)),
                ('power_forward', models.IntegerField(default=0)),
                ('center', models.IntegerField(default=0)),
                ('guard', models.IntegerField(default=0)),
                ('forward', models.IntegerField(default=0)),
                ('wing', models.IntegerField(default=0)),
                ('big', models.IntegerField(default=0)),
                ('util', models.IntegerField(default=0)),
                ('inj', models.IntegerField(default=0)),
                ('bench', models.IntegerField(default=0)),
                ('total', models.IntegerField(default=0)),
                ('commissioner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fantasy_league',
            },
        ),
        migrations.CreateModel(
            name='FantasyLineupEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(choices=[('point_guard', 'PG'), ('shooting_guard', 'SG'), ('small_forward', 'SF'), ('power_forward', 'PF'), ('center', 'C'), ('guard', 'G'), ('forward', 'F'), ('wing', 'W'), ('big', 'B'), ('bench', 'BN'), ('util', 'UTIL'), ('inj', 'INJ')], max_length=25)),
                ('lineup_date', models.DateField()),
                ('score', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('scoring_completed_flag', models.BooleanField(default=False)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba_stats.Player')),
            ],
            options={
                'db_table': 'fantasy_lineup_entry',
            },
        ),
        migrations.CreateModel(
            name='FantasyMatchup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateField()),
                ('end_date', models.DateField()),
                ('home_scoring_values', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('away_scoring_values', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('week_num', models.IntegerField(default=0)),
                ('scoring_completed_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'fantasy_matchup',
            },
        ),
        migrations.CreateModel(
            name='FantasyTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(max_length=5)),
                ('games', models.IntegerField(default=0)),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('ties', models.IntegerField(default=0)),
                ('win_pct', models.DecimalField(decimal_places=3, max_digits=5)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba_fantasy.FantasyLeague')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fantasy_team',
            },
        ),
        migrations.CreateModel(
            name='FantasyTeamRosterEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_via', models.CharField(choices=[('DR', 'Drafted'), ('TD', 'Trade'), ('FA', 'Free Agency/Waivers'), ('UO', 'Is a Free agent')], max_length=2)),
                ('acquisition_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba_fantasy.FantasyLeague')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba_stats.Player')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='nba_fantasy.FantasyTeam')),
            ],
            options={
                'db_table': 'fantasy_team_roster_entry',
            },
        ),
        migrations.CreateModel(
            name='FantasyTeamTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_date', models.DateField(null=True)),
                ('transaction_type', models.CharField(choices=[('DR', 'Drafted'), ('TD', 'Trade'), ('FA', 'Free Agency/Waivers'), ('UO', 'Is a Free agent')], max_length=2)),
                ('proposal_time', models.DateTimeField(null=True)),
                ('expiry_time', models.DateTimeField(null=True)),
                ('accepted_flag', models.BooleanField(default=False)),
                ('trade_identifier', models.UUIDField(null=True)),
                ('incoming_players', models.ManyToManyField(related_name='incoming_players', to='nba_stats.Player')),
                ('outgoing_players', models.ManyToManyField(related_name='outgoing_players', to='nba_stats.Player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team', to='nba_fantasy.FantasyTeam')),
            ],
            options={
                'db_table': 'fantasy_team_transaction',
            },
        ),
        migrations.AddField(
            model_name='fantasyteam',
            name='players',
            field=models.ManyToManyField(through='nba_fantasy.FantasyTeamRosterEntry', to='nba_stats.Player'),
        ),
        migrations.AddField(
            model_name='fantasymatchup',
            name='away_team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='away_team', to='nba_fantasy.FantasyTeam'),
        ),
        migrations.AddField(
            model_name='fantasymatchup',
            name='home_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_team', to='nba_fantasy.FantasyTeam'),
        ),
        migrations.AddField(
            model_name='fantasymatchup',
            name='league',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='nba_fantasy.FantasyLeague'),
        ),
        migrations.AddField(
            model_name='fantasylineupentry',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba_fantasy.FantasyTeam'),
        ),
        migrations.AlterUniqueTogether(
            name='fantasyteam',
            unique_together=set([('league', 'owner'), ('league', 'city', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='fantasyleague',
            unique_together=set([('name', 'commissioner')]),
        ),
    ]
